package psp.chatcliente;

import static java.awt.Color.*;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Alberto
 */
public class main extends javax.swing.JFrame {

    // Variables Constantes que no van a cambiar
    final String ipDefecto = "localhost";
    final int puertoDefecto = 5555;
    final String mensajeCierre = "*/close";

    // Para el botón On/Off
    Boolean encendido = false;

    // Variable utilizada para el primer mensaje de cada nuevo usuario
    Boolean primerMensaje = false;
    // Variable que almacena el nombre del usuario
    String nickName;

    // Array de bytes para el recoger la información del servidor
    byte[] resultado;

    Socket clienteSocket;
    InputStream is;
    OutputStream os;

    public main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lTituloDireccion = new javax.swing.JLabel();
        TxtDirec = new javax.swing.JTextField();
        TxtPuerto = new javax.swing.JTextField();
        lTituloPuerto = new javax.swing.JLabel();
        BtnAceptar = new javax.swing.JButton();
        BtnDefecto = new javax.swing.JButton();
        LInsertIp = new javax.swing.JLabel();
        LInsertPuerto = new javax.swing.JLabel();
        lTituloDireccion1 = new javax.swing.JLabel();
        TxtNick = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        LnumClientes = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txArea = new javax.swing.JTextArea();
        txtEscribir = new javax.swing.JTextField();
        BtnEnviar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(178, 23, 19));

        jPanel2.setBackground(new java.awt.Color(28, 113, 178));

        lTituloDireccion.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lTituloDireccion.setForeground(new java.awt.Color(252, 255, 78));
        lTituloDireccion.setText("Dirección:");
        lTituloDireccion.setToolTipText("");

        lTituloPuerto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lTituloPuerto.setForeground(new java.awt.Color(252, 255, 78));
        lTituloPuerto.setText("Puerto:");
        lTituloPuerto.setToolTipText("");

        BtnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_AceptarReposo.png"))); // NOI18N
        BtnAceptar.setBorder(null);
        BtnAceptar.setBorderPainted(false);
        BtnAceptar.setContentAreaFilled(false);
        BtnAceptar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_AceptarActivo.png"))); // NOI18N
        BtnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAceptarActionPerformed(evt);
            }
        });

        BtnDefecto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_DefectoReposo.png"))); // NOI18N
        BtnDefecto.setBorder(null);
        BtnDefecto.setBorderPainted(false);
        BtnDefecto.setContentAreaFilled(false);
        BtnDefecto.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_DefectoActivo.png"))); // NOI18N
        BtnDefecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnDefectoActionPerformed(evt);
            }
        });

        LInsertIp.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LInsertIp.setForeground(new java.awt.Color(252, 255, 78));
        LInsertIp.setText("Ip:");
        LInsertIp.setToolTipText("");

        LInsertPuerto.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        LInsertPuerto.setForeground(new java.awt.Color(252, 255, 78));
        LInsertPuerto.setText("Puerto:");
        LInsertPuerto.setToolTipText("");

        lTituloDireccion1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lTituloDireccion1.setForeground(new java.awt.Color(252, 255, 78));
        lTituloDireccion1.setText("NickName:");
        lTituloDireccion1.setToolTipText("");

        TxtNick.setToolTipText("");

        jLabel1.setForeground(new java.awt.Color(252, 255, 78));
        jLabel1.setText("Usuarios:");

        LnumClientes.setForeground(new java.awt.Color(255, 58, 53));
        LnumClientes.setText("0");
        LnumClientes.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lTituloDireccion)
                    .addComponent(TxtDirec, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(BtnAceptar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(LInsertPuerto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(TxtPuerto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LInsertIp, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(BtnDefecto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lTituloPuerto)
                    .addComponent(lTituloDireccion1)
                    .addComponent(TxtNick, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LnumClientes, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(LnumClientes))
                .addGap(18, 18, 18)
                .addComponent(lTituloDireccion1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TxtNick, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(lTituloDireccion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TxtDirec, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lTituloPuerto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TxtPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(BtnAceptar)
                .addGap(34, 34, 34)
                .addComponent(BtnDefecto, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LInsertIp)
                .addGap(18, 18, 18)
                .addComponent(LInsertPuerto)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txArea.setEditable(false);
        txArea.setColumns(20);
        txArea.setRows(5);
        jScrollPane1.setViewportView(txArea);

        txtEscribir.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtEscribir.setAutoscrolls(false);
        txtEscribir.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtEscribir.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtEscribirKeyPressed(evt);
            }
        });

        BtnEnviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_EnviarReposo.png"))); // NOI18N
        BtnEnviar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_EnviarActivo.png"))); // NOI18N
        BtnEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEnviarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtEscribir, javax.swing.GroupLayout.DEFAULT_SIZE, 359, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(BtnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtEscribir)
                    .addComponent(BtnEnviar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, Short.MAX_VALUE))
                .addContainerGap(30, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción del botón Aceptar, llama a los metodos
     * encender,insLabels,functionOsIs,cmBotones y guarda el nick del usuario en
     * una variable. Antes de poder hacer esto tiene que validar con los metodos
     * vCajaNick() y vCajasIpPort() que los TextField tengan contenido para que
     * devuelvan True.
     *
     * @param evt
     */
    private void BtnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAceptarActionPerformed

        if (vCajaNick() && vCajasIpPort()) {
            encender(TxtDirec.getText(), Integer.parseInt(TxtPuerto.getText()));

            nickName = TxtNick.getText().trim();

            insLabels(TxtDirec.getText(), TxtPuerto.getText());
            functionOsIs(nickName);
            cmBotones();
        }


    }//GEN-LAST:event_BtnAceptarActionPerformed
    /**
     * Acción del botón Por Defecto, llama a los metodos
     * encender,insLabels,functionOsIs,cmBotones y guarda el nick del usuario en
     * una variable. Antes de poder hacer esto tiene que validar con el metodo
     * vCajaNick() que el TextField tengan contenido para que devuelvan True.
     *
     * @param evt
     */
    private void BtnDefectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnDefectoActionPerformed

        if (vCajaNick()) {
            encender(ipDefecto, puertoDefecto);
            nickName = TxtNick.getText().trim();
            insLabels(ipDefecto, String.valueOf(puertoDefecto));
            functionOsIs(nickName);
            cmBotones();
        }

    }//GEN-LAST:event_BtnDefectoActionPerformed
    /**
     * Acción del botón Enviar, recoje el mensaje escrito por el usuario en una
     * variable y lo introduce en el metodo functionOsIs y luego vacie la caja
     * de texto.
     *
     * @param evt
     */
    private void BtnEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEnviarActionPerformed

        String textoRecogido = txtEscribir.getText();
        functionOsIs(textoRecogido);
        txtEscribir.setText("");
    }//GEN-LAST:event_BtnEnviarActionPerformed
    /**
     * Acción para el Textfield txtEscribir, el cuál recoje el evento de que si
     * tiene el focus y presionamos el botón Enter envie el contenido de esta al
     * metodo functionOsIs y luego se vacie
     *
     * @param evt
     */
    private void txtEscribirKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEscribirKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String textoRecogido = txtEscribir.getText();
            functionOsIs(textoRecogido);
            txtEscribir.setText("");
        }
    }//GEN-LAST:event_txtEscribirKeyPressed

    /**
     * Función On/Off, que conecta y desconecta(además de cerrar el chat) el
     * cliente con el servidor
     *
     * @param direccion
     * @param puerto
     */
    public void encender(String direccion, int puerto) {
        if (encendido == false) {

            try {
                encendido = true;

                clienteSocket = new Socket();

                InetSocketAddress addr = new InetSocketAddress(direccion, puerto);

                clienteSocket.connect(addr);

                is = clienteSocket.getInputStream();
                os = clienteSocket.getOutputStream();

                // Creamos un usuario donde en la clase se creará un hilo que se pondrá a la escuha de cualquier menjase que recibe del servidor
                new Usuarios(clienteSocket);
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                // Cuando se haga la llamada de desconectar llamamos al metodo functionOsIs
                //con un mensaje pre-Definido con un código, que hace que el servidor dé de baja a este cliente
                System.out.println("Cerrando el socket cliente");
                functionOsIs(mensajeCierre);
                // Metodo que limpia los TextField
                limpiar();
                clienteSocket.close();
                // Cierre del systema
                System.exit(0);
                System.out.println("Terminado");
            } catch (IOException ex) {
                Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    /**
     * Metodo para validar el TextField Nick, si la caja está vacía introduce en
     * esta Nombre requerido y en color rojo como mensaje de alerta y retorna
     * false para que no se pueda operar al contrario si todo es correcto pone
     * la letra en negro y envía true
     *
     * @return false
     * @return true
     */
    private Boolean vCajaNick() {

        if (TxtNick.getText().isEmpty()) {
            TxtNick.setForeground(red);
            TxtNick.setText("Nombre Requerido");
            return false;
        } else {
            TxtNick.setForeground(black);
            return true;
        }
    }

    /**
     * Metodo para validar los TextFields Ip y Puerto, si las cajas está vacías
     * introduce en ellas Dirección requerida o Puerto Requerid y en color rojo
     * como mensaje de alerta y retorna false para que no se pueda operar al
     * contrario si todo es correcto pone la letra en negro y envía true
     *
     * @return false
     * @return true
     */
    private Boolean vCajasIpPort() {

        if (TxtDirec.getText().isEmpty()) {
            TxtDirec.setForeground(red);
            TxtDirec.setText("Dirección Requerida");
            return false;
        } else if (TxtPuerto.getText().isEmpty()) {
            TxtPuerto.setForeground(red);
            TxtPuerto.setText("Puerto Requerido");
            return false;
        } else {
            TxtDirec.setForeground(black);
            TxtPuerto.setForeground(black);
            return true;
        }
    }

    /**
     * Metodo que cambia los Iconos y los PressedIconos de los Botones Aceptar y
     * Por Defecto una vez se pulsan una vez para indicar que la próxima vez que
     * se pulse se desconectará.
     */
    private void cmBotones() {
        BtnAceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_DesconectarReposo.png")));
        BtnAceptar.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_DesconectarActivo.png")));
        BtnDefecto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_DesconectarReposo.png")));
        BtnDefecto.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/ImgBotones/Btn_DesconectarActivo.png")));

    }

    /**
     * Metodo que inserta en labels la dirección y puerto recibidos
     *
     * @param direc
     * @param port
     */
    private void insLabels(String direc, String port) {
        LInsertIp.setText("Dirección: " + direc);
        LInsertPuerto.setText("Puerto: " + port);
    }

    /**
     * Metodo que limpia las cajas de texto
     */
    private void limpiar() {
        TxtNick.setText("");
        txtEscribir.setText("");
    }

    /**
     * Función que envia el mensaje al servidor, el primer mensaje es automático
     * envia el Nombre del cliente, luego ya envia los mensajes del propio
     * cliente
     *
     * @param texto
     */
    private void functionOsIs(String texto) {

        try {

            if (primerMensaje == false) {

                System.out.println("NickName que enviamos " + nickName);

                os.write(nickName.trim().getBytes());
                os.flush();
                primerMensaje = true;
            } else {

                System.out.println("Mensaje que enviamos " + texto);

                os.write(texto.trim().getBytes());
                os.flush();

            }

        } catch (IOException ex) {
            Logger.getLogger(main.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAceptar;
    private javax.swing.JButton BtnDefecto;
    private javax.swing.JButton BtnEnviar;
    private javax.swing.JLabel LInsertIp;
    private javax.swing.JLabel LInsertPuerto;
    public static javax.swing.JLabel LnumClientes;
    private javax.swing.JTextField TxtDirec;
    private javax.swing.JTextField TxtNick;
    private javax.swing.JTextField TxtPuerto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lTituloDireccion;
    private javax.swing.JLabel lTituloDireccion1;
    private javax.swing.JLabel lTituloPuerto;
    public static javax.swing.JTextArea txArea;
    private javax.swing.JTextField txtEscribir;
    // End of variables declaration//GEN-END:variables
}
